import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'diagonalDifference' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts 2D_INTEGER_ARRAY arr as parameter.
     */

    public static int diagonalDifference(List<List<Integer>> arr) {
    // Write your code here
    if(arr.size()==arr.get(0).size()){
        // this is a square matrix
        int length= arr.size();
        System.out.println("arr size is: "+arr.size());
        int[] diagLtoR=new int[length];
        int[] diagRtoL=new int[length];
        // get the elements on the diagonals
        for(int i=0;i<length;i++){
            //System.out.println("i is now: "+i);
            diagLtoR[i]=arr.get(i).get(i);
            //System.out.println(arr.get(i).get(i));
            diagRtoL[i]=arr.get((length-1) -i).get(i);
            //System.out.println(arr.get((length-1) -i).get(i));
        }
        // sum the arrays
        int sumDiagLtoR=0;
        for(int value:diagLtoR){
            sumDiagLtoR+=value;
        }
        int sumDiagRtoL=0;
        for(int value:diagRtoL){
            sumDiagRtoL+=value;
        }
        // find the diff
        int diff =Math.abs(sumDiagLtoR-sumDiagRtoL);
        // return the value
        return diff;
    }
        return 0; //TODO: Non-Square Matrix scenario
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<List<Integer>> arr = new ArrayList<>();

        IntStream.range(0, n).forEach(i -> {
            try {
                arr.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        int result = Result.diagonalDifference(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
